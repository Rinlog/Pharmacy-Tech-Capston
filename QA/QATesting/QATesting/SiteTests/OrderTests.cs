using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Security.Authentication;
using System.Text;
using System.Threading.Tasks;
using Bogus;
using OpenQA.Selenium;
using OpenQA.Selenium.DevTools.V131.Network;
using OpenQA.Selenium.Support.UI;
using QATesting.Methods;
using QATesting.SitePageElements;

namespace QATesting.SiteTests
{
    internal class OrderTests
    {
        public static bool FillInOrderForm(IWebDriver driver)
        {
            try
            {
                //waits for all form elements (except image upload things)
                MultiWait.Wait(
                    OrderElements.OrderAddPatientButtonSelector(),
                    OrderElements.OrderAddDrugButtonSelector(),
                    OrderElements.OrderAddDrugDoseSelector(),
                    OrderElements.OrderFormSelector(),
                    OrderElements.OrderRouteSelector(),
                    OrderElements.OrderFrequencySelector(),
                    OrderElements.OrderDurationSelector(),
                    OrderElements.OrderQuantitySelector(),
                    OrderElements.OrderAddPhysicianButtonSelector(),
                    OrderElements.OrderAddSIGButtonSelector(),
                    OrderElements.OrderStartSelector(),
                    OrderElements.OrderStartTimeSelector(),
                    OrderElements.OrderCommentsSelector(),
                    OrderElements.OrderAddSubmitButtonSelector(),
                    driver
                );
                var AddPatientButton = OrderElements.OrderAddPatientButton(driver);
                var AddDrugButton = OrderElements.OrderAddDrugButton(driver);
                var DrugDose = OrderElements.OrderAddDrugDose(driver);
                var Form = OrderElements.OrderForm(driver);
                var Route = OrderElements.OrderRoute(driver);
                var Frequency = OrderElements.OrderFrequency(driver);
                var Duration = OrderElements.OrderDuration(driver);
                var Quantity = OrderElements.OrderQuantity(driver);
                var PhysicianButton = OrderElements.OrderAddPhysicianButton(driver);
                var SigButton = OrderElements.OrderAddSIGButton(driver);
                var StartDate = OrderElements.OrderStart(driver);
                var StartTime = OrderElements.OrderStartTime(driver);
                var Comments = OrderElements.OrderComments(driver);

                AddPatientButton.Click();
                MultiWait.Wait(OrderElements.OrderAddModalRadioSelector(), OrderElements.OrderAddModalPatientConfirmButtonSelector(), driver);
                var ModalRadio = OrderElements.OrderAddModalRadio(driver);
                var PatientConfirm = OrderElements.OrderAddPatientModalConfirmButton(driver);
                ModalRadio.Click();
                PatientConfirm.Click();

                AddDrugButton.Click();
                MultiWait.Wait(OrderElements.OrderAddModalRadioSelector(), OrderElements.OrderAddDrugModalConfirmButtonSelector(), driver);
                var ModalRadio2 = OrderElements.OrderAddModalRadio(driver);
                var DrugConfrim = OrderElements.OrderAddDrugModalConfirmButton(driver);
                ModalRadio2.Click();
                DrugConfrim.Click();

                PhysicianButton.Click();
                MultiWait.Wait(OrderElements.OrderAddModalRadioSelector(), OrderElements.OrderAddPhysicianModalConfirmButtonSelector(), driver);
                var ModalRadio3 = OrderElements.OrderAddModalRadio(driver);
                var PhysicianConfrim = OrderElements.OrderAddPhysicianModalConfirmButton(driver);
                ModalRadio3.Click();
                PhysicianConfrim.Click();

                SigButton.Click();
                MultiWait.Wait(OrderElements.OrderAddModalRadioSelector(), OrderElements.OrderAddSIGModalConfirmButtonSelector(), driver);
                var ModalRadio4 = OrderElements.OrderAddModalRadio(driver);
                var SIGConfrim = OrderElements.OrderAddSIGModalConfirmButton(driver);
                ModalRadio4.Click();
                SIGConfrim.Click();

                Faker fake = new Faker();
                var Random = fake.Random;
                DrugDose.SendKeys(Random.Digits(1)[0].ToString());

                Form.SendKeys("Pill");
                Route.SendKeys("Oral");
                Frequency.SendKeys("100 times per second");
                Duration.SendKeys("10 years");
                Quantity.SendKeys("2 tons");
                StartDate.SendKeys((fake.Date.RecentDateOnly()).ToString());
                StartTime.SendKeys("12:00");
                Comments.Clear();
                Comments.SendKeys("Generated By QATESTS");
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        public static bool US4EnterPrescriptionOrder(IWebDriver driver, string BaseUrl)
        {
            try
            {
                bool result = LoginTests.TestValidLogin(driver, BaseUrl);
                if (result == true)
                {
                    WebDriverWait wait = new WebDriverWait(driver,TimeSpan.FromSeconds(30));
                    wait.Until(e => e.FindElements(By.CssSelector(HomeElements.OrdersButtonSelector())).Count == 1);
                    IWebElement OrderButton = HomeElements.OrdersButton(driver);
                    OrderButton.Click();
                    wait.Until(e => e.FindElements(By.CssSelector(OrderElements.OrderAddSelector())).Count == 1);
                    var OrderAdd = OrderElements.OrderAdd(driver);
                    OrderAdd.Click();
                    
                    if (FillInOrderForm(driver))
                    {
                        
                        var Submit = OrderElements.OrderAddSubmitButton(driver);
                        Submit.Click();
                        MultiWait.Wait(OrderElements.OrderAlertMessageSelector(), driver);
                        var AlertMessage = OrderElements.OrderAlertMessage(driver);
                        if (AlertMessage.Text.ToLower().Contains("order successfully created"))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex) 
            {
                return false;
            }
        }
    }
}
