// React import
import React, { useState, useEffect } from 'react';

const BackendIP = import.meta.env.VITE_BackendIP
const BackendPort = import.meta.env.VITE_BackendPort
function Logs() {

    // UseStates for log data
    const [data, setData] = useState([]);
    const [tableHeaders, setTableHeaders] = useState([]);
    const [dataObtained, setDataObtained] = useState(false);

    // UseStates for date range
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');

    // Map the headers to the data for the table
    const headerMapping = {
        "logID": "Log ID",
        "actorID": "Actor ID",
        "affectedOrder": "Affected Order",
        "actionLogged": "Action Logged",
        "timeLogged": "Time Logged"
    };

    // Get the logs
    const GetLogs = async () => {
        try {
            let end = endDate.toString() || null;

            // Call the API
            const response = await fetch('https://'+BackendIP+':'+BackendPort+'/api/Log/getlogs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',


                },                    
                body: JSON.stringify({
                    StartDate: startDate.toString(),
                    EndDate: end
                }),
            });
            // Get the data out of the response
            const fetchedData = await response.json();

            // If there is an issue with the response, alert the user
            if(response.status != 200) {
                alert(fetchedData.message);
                console.error(fetchedData.message);
                return;
            }

            if (fetchedData.data.length > 0) {
                // We got data, so transform it
                // This doesn't need to be he.decoded since it's generated by the system and therefore not including any "dangerous" characters
                const transformedData = fetchedData.data.map(item => {
                    return {
                        "Log ID": item.logID,
                        "Actor ID": item.actorID,
                        "Affected Order": item.affectedOrder,
                        "Action Logged": item.actionLogged,
                        "Time Logged": item.timeLogged
                    };
                });
                
                setData(transformedData);
                const keys = Object.keys(transformedData[0]);

                // Map the custom versions
                const customHeaders = keys.map(key => headerMapping[key] || key);
                setTableHeaders(customHeaders);
                setDataObtained(true);

            }
        } catch (error) {
            alert("Error getting logs. Please try again.");
            console.error(error);
            setDataObtained(false);
        }
    }

    const handleSubmit = (e) => {
        e.preventDefault();
        GetLogs();
    }
    
    return(

        <div>
            <h1>Logs List</h1>
            <hr/>

            <form onSubmit={handleSubmit}>
                <input type="date" required onChange={e => setStartDate(e.target.value)} style={{width:150}}/>
                <input type="date" onChange={e => setEndDate(e.target.value)} style={{width:150}} />
                <br/>
                <button type="submit">Get Logs</button>
            </form>


            <br/><br/>

            {dataObtained && (
                <table>
                    <thead>
                        <tr>
                            {tableHeaders.map(header => (
                                <th key={header}>{header}</th>
                            ))}
                        </tr>
                    </thead>
                    <tbody>
                        {data.map((item, index) => (
                            <tr key={index}>
                                {tableHeaders.map(header => (
                                    <td key={header}>{item[header]}</td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>

    )

}

export default Logs;