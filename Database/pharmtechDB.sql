-- Pharmacy Tech Database Creation File
    -- This file contains the SQL code to create the database and tables for the Pharmacy Tech Project
    -- As well as some default data to be inserted into the tables

-- Use Database
USE pharmtechDB;

-- Drop Tables if they exist
DROP TABLE IF EXISTS UserTable;
DROP TABLE IF EXISTS PatientTable;
DROP TABLE IF EXISTS PhysicianTable;
DROP TABLE IF EXISTS DrugTable;
DROP TABLE IF EXISTS SIGTable;
DROP TABLE IF EXISTS OrderTable;
DROP TABLE IF EXISTS ImageTable;
DROP TABLE IF EXISTS LabelTable;
DROP TABLE IF EXISTS LogTable;
DROP TABLE IF EXISTS ConfirmationCodeTable;
DROP TABLE IF EXISTS PasswordResetCodeTable;
DROP TABLE IF EXISTS PrintStatusTable;
DROP TABLE IF EXISTS NotificationTable;

-- Create the table in the specified schema
CREATE TABLE PrintStatusTable
(
    PrintStatusID INT NOT NULL PRIMARY KEY, -- primary key column
    PrintType VARCHAR(50) NOT NULL,
    PrintMessage VARCHAR(50) NOT NULL
    -- specify more columns here
)


-- Create User Table
-- This table will store all users of the system (Admins and Students)
    -- User ID will be generated by the system and will be unique
    -- All user accounts by default will be inactive until the user verifies their email
    -- Student accounts will expire after a certain period of time (eg. End of the semester) and subsequently be deleted
    -- Admin accounts will never be deleted by the system automatically via the expiration, but can be deleted manually
CREATE TABLE UserTable (
    userID char(6) PRIMARY KEY NOT NULL,            -- Format LLII00 (Location, First Initial, Last Initial, Incrementing Number)
    fName varchar(255) NOT NULL,
    lName varchar(255) NOT NULL,
    email varchar(255) NOT NULL,
    password varchar(255) NOT NULL,                 -- The user's hashed password
    campus varchar(255) NOT NULL,

    admin bit NOT NULL,                             -- If user is an admin (1) or not (0) (Students vs Admins/Instructors)
    active bit NOT NULL DEFAULT 0,                  -- If user is active (1) or not (0) (Deactivated or non verified users will be inactive)
    removed bit NOT NULL DEFAULT 0,
    createdDate datetime NOT NULL,                  -- Date user was created
    expirationDate datetime                         -- Date user account expires (If NULL, account never expires)
)




-- Create Patient Table
-- This table will store all patients in the system
    -- Patients will be added by an admin
    -- PPR will start at 1000 and automatically increment by 1 for each new patient
    -- Patients can only be deleted by an admin
    -- Address and City are nullable since a patient may not have an address or city or may not disclose it
    -- Allergies and Conditions are not nullable to ensure it is filled out when a patient is added
CREATE TABLE PatientTable (
    PPR int IDENTITY(1000,1) PRIMARY KEY NOT NULL,  -- Patient Prescription Record Number (Auto Incremented) 
    fName varchar(255) NOT NULL,
    lName varchar(255) NOT NULL,
    DOB date NOT NULL,                              -- Date of Birth
    sex varchar(40) NOT NULL,
    address varchar(255),
    city varchar(255),
    hospitalName varchar(255) NOT NULL,             -- Name of Hospital where patient is located
    roomNumber varchar(255) NOT NULL,   
    unitNumber varchar(255) NOT NULL,

    allergies varchar(500) NOT NULL,                -- Allergies patient has (Comma separated, "None" if none)
    conditions varchar(500) NOT NULL,               -- Conditions patient has
)




-- Create Physician Table
-- This table will store physician information
    -- Physicians will be added by an admin
    -- Physician ID will be generated by the system and will be unique
    -- Physicians can only be deleted by an admin
CREATE TABLE PhysicianTable (
    physicianID char(6) PRIMARY KEY NOT NULL,       -- Format II0000 (First Initial, Last Initial, Incrementing Number) to differentiate from User
    fName varchar(255) NOT NULL,
    lName varchar(255) NOT NULL,
    city varchar(255) NOT NULL,
    province varchar(255) NOT NULL
)




-- Create Drug Table
-- This table will store all drugs in the system
    -- Drugs will be added by an admin
    -- DIN will be used as the primary key since it is unique to each drug and is a standard identifier
    -- Drugs can only be deleted by an admin
    -- Reference Brand is nullable since a drug may not have a reference brand
CREATE TABLE DrugTable (
    DIN varchar(8) PRIMARY KEY NOT NULL,            -- Drug Identification Number (Numeric)
    drugName varchar(255) NOT NULL,                 -- Name of Medication
    dosage varchar(255) NOT NULL,                   -- Dosage of Medication (e.g. 10mg)
    strength varchar(255) NOT NULL,                  -- Strength of Medication
    manufacturer varchar(255) NOT NULL,             -- Manufacturer
    concentration varchar(255) NOT NULL,            -- Concentration
    referenceBrand varchar(255),                    -- Reference Brand name if any (e.g. Tylenol, Advil, etc.)
    containerSize varchar(255) NOT NULL             -- Size of the container (e.g. 100 Tablets, 500mL, etc.)
)




-- Create SIG Table
-- This table will store SIG codes for the system
    -- SIG codes are used to describe the directions for taking a medication
    -- Some SIG codes will be hard coded
    -- If a SIG code is not in the table, the user will be prompted to enter a description when creating an order
    -- That description will be stored in the SIGDescription field for that order
    -- Otherwise, the SIGDescription will be the description from the SIG table
CREATE TABLE SIGTable (
    abbreviation varchar(10) PRIMARY KEY NOT NULL,  -- SIG Code
    description varchar(500) NOT NULL               -- Description of SIG
)




-- Create Order Table
-- This table will hold all orders made in the system
    -- Orders will be created by a user (Initiator)
    -- RxNum will start at 1000 and automatically increment by 1 for each new order
    -- Orders can only be Submitted, Rejected, Amended, or Approved
    -- The SIG code will be entered by the user and the description will be prompted if the SIG code is not found in the SIG table
    -- The SIG code is not a foreign key to the SIG table to allow for SIG codes that are not in the table
    -- PrescribedDose will be entered by the user, and based off the drug info in the Drug table
    -- Orders will be verified by a different user and can be rejected or approved (Verifier)
    -- If an order is rejected, it can be amended and reviewed again
    -- If an order is amended, the status and dateLastChanged will be updated
    -- Once an order is approved, it's information will be added to the label table and the verification information will be populated
    -- Changes to an order will be logged in the Log table
CREATE TABLE OrderTable (
    rxNum int IDENTITY(1000,1) PRIMARY KEY NOT NULL,-- Prescription Number (Auto Incremented)
    PPR int NOT NULL,                               -- Patient for whom the prescription is
    DIN varchar(8) NOT NULL,                        -- Drug being prescribed
    physicianID char(6) NOT NULL,                   -- Physician who prescribed the drug
    status varchar(20) NOT NULL                     -- Status of the order
    CHECK (status IN ('Submitted', 'Rejected', 'Amended', 'Approved')), 

    initiator char(6) NOT NULL,                     -- User who initiated the order
    verifier char(6),                               -- User who verified the order (If not verified, this will be NULL)
    dateSubmitted datetime NOT NULL,                -- Date the order was submitted
    dateLastChanged datetime,                       -- Date the order was last changed (If not changed, this will be the same as dateSubmitted)
    dateVerified datetime,                          -- Date the order was verified (If not verified, this will also be NULL)

    SIG varchar(10) NOT NULL,                       -- SIG Code 
    SIGDescription varchar(255) NOT NULL,           -- Description of the SIG Code Entered

    form varchar(255) NOT NULL,                     -- Form of Medication (e.g. Tablet, Capsule, Liquid)
    route varchar(255) NOT NULL,                    -- Route of Administration (e.g. Oral, Intravenous)
    prescribedDose varchar(255) NOT NULL,           -- Dose to be given to the patient (e.g. 1 Tablet, 10mg, 5mL)
    frequency varchar(255) NOT NULL,                -- Frequency of Administration (e.g. Once Daily, Twice Daily)
    duration varchar(255) NOT NULL,                 -- Duration of Treatment (e.g. 7 Days, 1 Month)
    quantity varchar(255) NOT NULL,                 -- Quantity to be dispensed (e.g. 30 Tablets, 100mL)
    startDate datetime NOT NULL,                    -- Date the medication should be started
    startTime varchar(255) NOT NULL,                -- Time the medication should be started

    PrintStatusID int,
    comments varchar(500),                          -- Comments on the order

    FOREIGN KEY (PPR) REFERENCES PatientTable(PPR),
    FOREIGN KEY (DIN) REFERENCES DrugTable(DIN),
    FOREIGN KEY (physicianID) REFERENCES PhysicianTable(physicianID),
    FOREIGN KEY (initiator) REFERENCES UserTable(userID),
    FOREIGN KEY (verifier) REFERENCES UserTable(userID),
    FOREIGN KEY (PrintStatusID) REFERENCES PrintStatusTable(PrintStatusID)
)



-- Create Image Table
CREATE TABLE ImageTable (
    imageID int IDENTITY(1,1) PRIMARY KEY NOT NULL, -- Image ID (Auto Incremented)
    rxNum int NOT NULL,                             -- Prescription Number
    imagePath varchar(500) NOT NULL,                -- Path to the image on the server (e.g. Assets/Images/image.jpg)

    FOREIGN KEY (rxNum) REFERENCES OrderTable(rxNum)
)



-- Create Label Table
-- This table holds all the information on a label
    -- This table will be populated when an order is approved
    -- The information will never change once it is added because all labels for an order should be the same
    -- None of the columns are foreign keys since it will be populated at the time of creation and don't need to be referenced
    -- PatientName, FilledByName, and CheckedByName need to be built from their respective tables before being inserted
CREATE TABLE LabelTable (
    labelID int IDENTITY(1,1) PRIMARY KEY NOT NULL, -- Label ID (Auto Incremented)
    patientName varchar(255) NOT NULL,              -- Patient Name (Last, First)
    patientNumber int NOT NULL,                     -- Patient Number (PPR in Patient Table)
    hospitalName varchar(255) NOT NULL,             -- Hospital Name
    roomNumber varchar(255) NOT NULL,               -- Room Number
    unitNumber varchar(255) NOT NULL,               -- Unit Number

    drugName varchar(255) NOT NULL,                 -- Drug Name (Drug Name in the Drug Table)
    drugDose varchar(255) NOT NULL,                 -- Drug Dose (PrescribedDose in the Order Table)
    drugDIN varchar(8) NOT NULL,                    -- Drug Identification Number (DIN in the Drug Table)
    quantity varchar(255) NOT NULL,                 -- Quantity to be dispensed
    rxNum int NOT NULL,                             -- Prescription Number (RxNum in the Order Table)

    SIGCode varchar(10) NOT NULL,                    -- SIG Code
    -- Barcode?

    filledByName varchar(255) NOT NULL,             -- Name of the User who created the order (Last, First)
    filledDate datetime NOT NULL,                   -- Date the order was created

    checkedByName varchar(255) NOT NULL,            -- Name of the User who verified the order (Last, First)
    checkedDate datetime NOT NULL                   -- Date the order was verified
)




-- Create Log Table
-- This table will store all logs for actions relating to orders
    -- Logs will be automatically created when an order is submitted, verified, rejected, or amended
    -- Logs will be deleted once the order is deleted
        -- Since it doesn't make sense to store log data for an order that no longer exists                                                                              (??)
    -- User ID will be stored in the log to identify who performed the action
    -- If the user is deleted, the order will be set to a default user (000000) to maintain data integrity
CREATE TABLE LogTable (
    logID int IDENTITY(1,1) PRIMARY KEY NOT NULL,   -- Log ID (Auto Incremented)
    actorID char(6) NOT NULL,                       -- User who performed the action

    affectedOrder int NOT NULL,                     -- RxNum affected by the action
    actionLogged varchar(255) NOT NULL,             -- Action that was logged (e.g. Order Submitted, Order Verified, Order Rejected)

    timeLogged datetime NOT NULL                    -- Time the action was logged (e.g. 2021-03-31 12:00:00)

    FOREIGN KEY (actorID) REFERENCES UserTable(userID),
    FOREIGN KEY (affectedOrder) REFERENCES OrderTable(rxNum)
)




-- Create Confirmation Code Table
-- This table is for storing confirmation strings for email verification
    -- When a user registers, a confirmation code will be generated and stored in this table until the user confirms their email
    -- The generated code will be a number from 111 111 to 2,147,483,647 (max int value)
    -- Once the user confirms their email, the entry will be deleted
    -- If the user is deleted, the entry will be deleted as well
CREATE TABLE ConfirmationCodeTable (
    userID char(6) PRIMARY KEY NOT NULL,            -- User ID for whom the key is generated
    code int NOT NULL,                              -- Confirmation Code

    FOREIGN KEY (userID) REFERENCES UserTable(userID)
)




-- Create Password Reset Code Table
-- This table is for storing password reset strings for resetting a user's password
    -- When a user requests a password reset, a password reset code will be generated and stored in this table until the user resets their password
    -- The generated code will be a number from 111 111 to 2,147,483,647 (max int value)
    -- Once the user resets their password or the code expires, the entry will be deleted
    -- If the user is deleted, the entry will be deleted as well
CREATE TABLE PasswordResetCodeTable (
    userID char(6) PRIMARY KEY NOT NULL,            -- User ID for whom the key is generated
    code int NOT NULL,                              -- Password Reset Code
    expiration datetime NOT NULL                    -- Expiration Date of the Password Reset Code

    FOREIGN KEY (userID) REFERENCES UserTable(userID)
)



GO

CREATE TABLE NotificationTable
(
    NotificationID INT NOT NULL PRIMARY KEY IDENTITY(1,1), -- primary key column
    NMessage [NVARCHAR](999) NOT NULL,
    Recipient char(6) NOT NULL,
    Seen bit NOT NULL DEFAULT 0,
    DateAdded DATETIME2 NOT NULL default CURRENT_TIMESTAMP,


    FOREIGN KEY (Recipient) REFERENCES UserTable(UserID)
);
GO